# Generated by Django 2.2.1 on 2019-05-18 14:30

import core.DurationField
import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(default='', max_length=16, verbose_name='Code')),
                ('gender', models.PositiveSmallIntegerField(choices=[(0, 'Men'), (1, 'Women'), (2, 'Open')], default=0, verbose_name='Gender')),
                ('description', models.CharField(blank=True, default='', max_length=80, verbose_name='Description')),
                ('sequence', models.PositiveSmallIntegerField(default=0, verbose_name='Sequence')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ['sequence', '-gender', 'code'],
            },
        ),
        migrations.CreateModel(
            name='CategoryFormat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=32, verbose_name='Name')),
                ('description', models.CharField(blank=True, default='', max_length=80, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'CategoryFormat',
                'verbose_name_plural': 'CategoryFormats',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CategoryGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequence', models.PositiveSmallIntegerField(blank=True, default=32767, verbose_name='Sequence')),
                ('name', models.CharField(default='MyGroup', max_length=32, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'CategoryGroup',
                'verbose_name_plural': 'CategoryGroups',
            },
        ),
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Name')),
                ('long_name', models.CharField(blank=True, default='', max_length=80, verbose_name='Long Name (Title)')),
                ('description', models.CharField(blank=True, default='', max_length=80, verbose_name='Description')),
                ('city', models.CharField(blank=True, default='', max_length=64, verbose_name='City')),
                ('stateProv', models.CharField(blank=True, default='', max_length=64, verbose_name='StateProv')),
                ('country', models.CharField(blank=True, default='', max_length=64, verbose_name='Country')),
                ('organizer', models.CharField(max_length=64, verbose_name='Organizer')),
                ('organizer_contact', models.CharField(blank=True, default='', max_length=64, verbose_name='Organizer Contact')),
                ('organizer_email', models.EmailField(blank=True, max_length=254, verbose_name='Organizer Email')),
                ('organizer_phone', models.CharField(blank=True, default='', max_length=22, verbose_name='Organizer Phone')),
                ('start_date', models.DateField(db_index=True, verbose_name='Start Date')),
                ('number_of_days', models.PositiveSmallIntegerField(default=1, verbose_name='Number of Days')),
                ('using_tags', models.BooleanField(default=False, verbose_name='Using Tags/Chip Reader')),
                ('use_existing_tags', models.BooleanField(default=True, verbose_name="Use Competitor's Existing Tags")),
                ('do_tag_validation', models.BooleanField(default=True, verbose_name='Do Tag Validation')),
                ('distance_unit', models.PositiveSmallIntegerField(choices=[(0, 'km'), (1, 'miles')], default=0, verbose_name='Distance Unit')),
                ('ftp_host', models.CharField(blank=True, default='', max_length=80, verbose_name='FTP Host')),
                ('ftp_user', models.CharField(blank=True, default='', max_length=80, verbose_name='FTP User')),
                ('ftp_password', models.CharField(blank=True, default='', max_length=64, verbose_name='FTP Password')),
                ('ftp_path', models.CharField(blank=True, default='', max_length=256, verbose_name='FTP Path')),
                ('ftp_upload_during_race', models.BooleanField(default=False, verbose_name='Live FTP Update During Race')),
                ('show_signature', models.BooleanField(default=True, verbose_name='Show Signature in Participant Edit Screen')),
                ('ga_tracking_id', models.CharField(blank=True, default='', max_length=20, verbose_name='Google Analytics Tracking ID')),
                ('recurring', models.PositiveSmallIntegerField(choices=[(0, '-'), (7, 'Every Week'), (14, 'Every 2 Weeks'), (21, 'Every 3 Weeks'), (28, 'Every 4 Weeks')], default=0, verbose_name='Recurring')),
                ('bib_label_print', models.BooleanField(default=False, help_text='1 bib on 1 label', verbose_name='1 Bib Label Print')),
                ('bibs_label_print', models.BooleanField(default=False, help_text='2 bibs on 2 labels', verbose_name='2 Bibs Label Print')),
                ('bibs_laser_print', models.BooleanField(default=False, help_text='2 bibs on one page', verbose_name='2 Bibs Laser Print')),
                ('shoulders_label_print', models.BooleanField(default=False, help_text='2 numbers on 2 labels', verbose_name='2 Shoulders Label Print')),
                ('frame_label_print', models.BooleanField(default=False, help_text='2 frame numbers on 2 labels', verbose_name='2 Frame Label Print')),
                ('frame_label_print_1', models.BooleanField(default=False, help_text='1 frame number on 1 label', verbose_name='1 Frame Label Print')),
                ('license_check_note', models.CharField(blank=True, default='', max_length=240, verbose_name='License Check Note')),
                ('category_format', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.CategoryFormat', verbose_name='Category Format')),
            ],
            options={
                'verbose_name': 'Competition',
                'verbose_name_plural': 'Competitions',
                'ordering': ['-start_date', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Discipline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('sequence', models.PositiveSmallIntegerField(default=0, verbose_name='Sequence')),
            ],
            options={
                'verbose_name': 'Discipline',
                'verbose_name_plural': 'Disciplines',
                'ordering': ['sequence', 'name'],
            },
        ),
        migrations.CreateModel(
            name='EventMassStart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, verbose_name='Name')),
                ('date_time', models.DateTimeField(db_index=True, verbose_name='Date Time')),
                ('event_type', models.PositiveSmallIntegerField(choices=[(0, 'Mass Start'), (1, 'Time Trial')], default=0, verbose_name='Event Type')),
                ('optional', models.BooleanField(default=False, help_text='Allows Participants to choose to enter the Event.  Otherwise the Event is included for all participants.', verbose_name='Optional')),
                ('option_id', models.PositiveIntegerField(default=0, verbose_name='Option Id')),
                ('select_by_default', models.BooleanField(default=False, help_text='If the Event is "Optional", and "Select by Default", Participants will be automatically added to the Event (but can opt-out later).', verbose_name='Select by Default')),
                ('rfid_option', models.PositiveIntegerField(choices=[(0, 'Manual Start: Collect every chip. Does NOT restart race clock on first read.'), (1, 'Automatic Start: Reset start clock on first tag read.  All riders get the start time of the first read.'), (2, 'Manual Start: Skip first tag read for all riders.  Required when start run-up passes the finish line.')], default=1, verbose_name='RFID Option')),
                ('road_race_finish_times', models.BooleanField(default=False, help_text='Ignore decimals, groups get same time', verbose_name='Road Race Finish Times')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Note')),
                ('dnsNoData', models.BooleanField(default=True, verbose_name='Show Participants with no race data as DNS')),
                ('win_and_out', models.BooleanField(default=False, verbose_name='Win and Out')),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Competition')),
            ],
            options={
                'verbose_name': 'Mass Start Event',
                'verbose_name_plural': 'Mass Starts Event',
            },
        ),
        migrations.CreateModel(
            name='EventTT',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, verbose_name='Name')),
                ('date_time', models.DateTimeField(db_index=True, verbose_name='Date Time')),
                ('event_type', models.PositiveSmallIntegerField(choices=[(0, 'Mass Start'), (1, 'Time Trial')], default=0, verbose_name='Event Type')),
                ('optional', models.BooleanField(default=False, help_text='Allows Participants to choose to enter the Event.  Otherwise the Event is included for all participants.', verbose_name='Optional')),
                ('option_id', models.PositiveIntegerField(default=0, verbose_name='Option Id')),
                ('select_by_default', models.BooleanField(default=False, help_text='If the Event is "Optional", and "Select by Default", Participants will be automatically added to the Event (but can opt-out later).', verbose_name='Select by Default')),
                ('rfid_option', models.PositiveIntegerField(choices=[(0, 'Manual Start: Collect every chip. Does NOT restart race clock on first read.'), (1, 'Automatic Start: Reset start clock on first tag read.  All riders get the start time of the first read.'), (2, 'Manual Start: Skip first tag read for all riders.  Required when start run-up passes the finish line.')], default=1, verbose_name='RFID Option')),
                ('road_race_finish_times', models.BooleanField(default=False, help_text='Ignore decimals, groups get same time', verbose_name='Road Race Finish Times')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Note')),
                ('dnsNoData', models.BooleanField(default=True, verbose_name='Show Participants with no race data as DNS')),
                ('create_seeded_startlist', models.BooleanField(default=True, help_text='If True, seeded start times will be generated in the startlist for CrossMgr.  If False, no seeded times will be generated, and the TT time will start on the first recorded time in CrossMgr.', verbose_name='Create Seeded Startlist')),
                ('group_size', models.PositiveSmallIntegerField(default=0, help_text='Maximum number of starters without a Group Size Gap.  The Group Size Gap will be inserted between riders of Group Size (if non-zero).', verbose_name='Group Size')),
                ('group_size_gap', core.DurationField.DurationField(default="5:00", verbose_name='Group Size Gap')),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Competition')),
            ],
            options={
                'verbose_name': 'Time Trial Event',
                'verbose_name_plural': 'Time Trial Events',
            },
        ),
        migrations.CreateModel(
            name='LegalEntity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Name')),
                ('contact', models.CharField(blank=True, default='', max_length=64, verbose_name='Contact')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email')),
                ('phone', models.CharField(blank=True, default='', max_length=22, verbose_name='Phone')),
                ('website', models.CharField(blank=True, default='', max_length=255, verbose_name='Website')),
                ('waiver_expiry_date', models.DateField(db_index=True, default=datetime.date(1970, 1, 1), verbose_name='Waiver Expiry Date')),
            ],
            options={
                'verbose_name': 'LegalEntity',
                'verbose_name_plural': 'LegalEntities',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='LicenseHolder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_name', models.CharField(db_index=True, max_length=64, verbose_name='Last Name')),
                ('first_name', models.CharField(db_index=True, max_length=64, verbose_name='First Name')),
                ('gender', models.PositiveSmallIntegerField(choices=[(0, 'Men'), (1, 'Women')], default=0)),
                ('date_of_birth', models.DateField()),
                ('city', models.CharField(blank=True, default='', max_length=64, verbose_name='City')),
                ('state_prov', models.CharField(blank=True, default='', max_length=64, verbose_name='State/Prov')),
                ('nationality', models.CharField(blank=True, default='', max_length=64, verbose_name='Nationality')),
                ('nation_code', models.CharField(blank=True, default='', max_length=3, verbose_name='NatCode')),
                ('zip_postal', models.CharField(blank=True, default='', max_length=12, verbose_name='Zip/Postal')),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('phone', models.CharField(blank=True, default='', max_length=64, verbose_name='Phone')),
                ('uci_code', models.CharField(blank=True, db_index=True, default='', max_length=11, verbose_name='UCI Code')),
                ('uci_id', models.CharField(blank=True, db_index=True, default='', max_length=11, verbose_name='UCIID')),
                ('license_code', models.CharField(max_length=32, null=True, unique=True, verbose_name='License Code')),
                ('existing_bib', models.PositiveSmallIntegerField(blank=True, db_index=True, null=True, verbose_name='Existing Bib')),
                ('existing_tag', models.CharField(blank=True, max_length=36, null=True, unique=True, verbose_name='Existing Tag')),
                ('existing_tag2', models.CharField(blank=True, max_length=36, null=True, unique=True, verbose_name='Existing Tag2')),
                ('suspended', models.BooleanField(db_index=True, default=False, verbose_name='Suspended')),
                ('active', models.BooleanField(db_index=True, default=True, verbose_name='Active')),
                ('search_text', models.CharField(blank=True, db_index=True, default='', max_length=256)),
                ('eligible', models.BooleanField(db_index=True, default=True, verbose_name='Eligible to Compete')),
                ('note', models.TextField(blank=True, null=True, verbose_name='LicenseHolder Note')),
                ('ineligible_on_date_time', models.DateTimeField(blank=True, default=None, help_text='Date/Time when the License Holder starts to be ineligible.  Defaults to the next day.  If blank, the License Holder will be ineligible immediately.  ', null=True, verbose_name='Ineligible Starting at')),
                ('emergency_contact_name', models.CharField(blank=True, default='', max_length=64, verbose_name='Emergency Contact')),
                ('emergency_contact_phone', models.CharField(blank=True, default='', max_length=64, verbose_name='Emergency Contact Phone')),
                ('emergency_medical', models.CharField(blank=True, default='', help_text='eg. diabetic, drug alergy, etc.', max_length=128, verbose_name='Medical Alert')),
            ],
            options={
                'verbose_name': 'LicenseHolder',
                'verbose_name_plural': 'LicenseHolders',
                'ordering': ['search_text'],
            },
        ),
        migrations.CreateModel(
            name='NumberSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Name')),
                ('sequence', models.PositiveSmallIntegerField(db_index=True, default=0, verbose_name='Sequence')),
                ('range_str', models.TextField(blank=True, default='', verbose_name='Ranges')),
                ('sponsor', models.CharField(blank=True, default='', max_length=80, verbose_name='Sponsor')),
                ('description', models.CharField(blank=True, default='', max_length=80, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Number Set',
                'verbose_name_plural': 'Number Sets',
                'ordering': ['sequence'],
            },
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.PositiveSmallIntegerField(choices=[('Team', ((110, 'Competitor'), (120, 'Manager'), (130, 'Coach'), (140, 'Doctor'), (150, 'Paramedical Asst.'), (160, 'Mechanic'), (170, 'Driver'), (199, 'Staff'))), ('Official', ((210, 'Commissaire'), (220, 'Timer'), (230, 'Announcer'), (240, 'Radio Operator'), (250, 'Para Classifier'), (299, 'Official Staff'))), ('Organizer', ((310, 'Administrator'), (320, 'Organizer Mechanic'), (330, 'Organizer Driver'), (399, 'Organizer Staff'))), ('Press', ((410, 'Photographer'), (420, 'Reporter')))], default=110, verbose_name='Role')),
                ('preregistered', models.BooleanField(default=False, verbose_name='Preregistered')),
                ('registration_timestamp', models.DateTimeField(auto_now_add=True)),
                ('bib', models.PositiveSmallIntegerField(blank=True, db_index=True, null=True, verbose_name='Bib')),
                ('tag', models.CharField(blank=True, max_length=36, null=True, verbose_name='Tag')),
                ('tag2', models.CharField(blank=True, max_length=36, null=True, verbose_name='Tag2')),
                ('tag_checked', models.BooleanField(default=False, verbose_name='Tag Checked')),
                ('license_checked', models.BooleanField(default=False, verbose_name='License Checked')),
                ('signature', models.TextField(blank=True, default='', verbose_name='Signature')),
                ('paid', models.BooleanField(default=False, verbose_name='Paid')),
                ('confirmed', models.BooleanField(default=False, verbose_name='Confirmed')),
                ('note', models.TextField(blank=True, default='', verbose_name='Note')),
                ('est_kmh', models.FloatField(default=0.0, verbose_name='Est Kmh')),
                ('seed_early', models.BooleanField(default=False, verbose_name='Seed Early')),
                ('seed_option', models.SmallIntegerField(choices=[(1, '-'), (0, 'Seed Early'), (2, 'Seed Late'), (3, 'Seed Last')], default=1, verbose_name='Seed Option')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.Category')),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Competition')),
                ('license_holder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.LicenseHolder')),
            ],
            options={
                'verbose_name': 'Participant',
                'verbose_name_plural': 'Participants',
                'ordering': ['license_holder__search_text'],
            },
        ),
        migrations.CreateModel(
            name='RaceClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('sequence', models.PositiveSmallIntegerField(default=0, verbose_name='Sequence')),
            ],
            options={
                'verbose_name': 'Race Class',
                'verbose_name_plural': 'Race Classes',
                'ordering': ['sequence', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ReportLabel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Label used for reporting.', max_length=32, verbose_name='Report Label')),
                ('sequence', models.PositiveSmallIntegerField(default=0, verbose_name='Sequence')),
            ],
            options={
                'verbose_name': 'Report Label',
                'verbose_name_plural': 'Report Labels',
                'ordering': ['sequence'],
            },
        ),
        migrations.CreateModel(
            name='SeasonsPass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Name')),
                ('sequence', models.PositiveSmallIntegerField(db_index=True, default=0, verbose_name='Sequence')),
            ],
            options={
                'verbose_name': "Season's Pass",
                'verbose_name_plural': "Season's Passes",
                'ordering': ['sequence'],
            },
        ),
        migrations.CreateModel(
            name='Series',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequence', models.PositiveSmallIntegerField(blank=True, default=32767, verbose_name='Sequence')),
                ('name', models.CharField(default='MySeries', max_length=32, verbose_name='Name')),
                ('description', models.CharField(blank=True, default='', max_length=80, verbose_name='Description')),
                ('ranking_criteria', models.PositiveSmallIntegerField(choices=[(0, 'Points'), (1, 'Time'), (2, '% Finish/Winning Time')], default=0, verbose_name='Ranking Criteria')),
                ('show_last_to_first', models.BooleanField(default=True, verbose_name='Show Events Last to First')),
                ('tie_breaking_rule', models.PositiveSmallIntegerField(choices=[(5, 'Number of 1st, 2nd, 3rd, 4th then 5th place finishes'), (4, 'Number of 1st, 2nd, 3rd then 4th place finishes'), (3, 'Number of 1st, 2nd then 3rd place finishes'), (2, 'Number of 1st then 2nd place finishes'), (1, 'Number of 1st place finishes'), (0, 'Do not consider place finishes')], default=5, verbose_name='Tie-breaking Rule')),
                ('consider_most_events_completed', models.BooleanField(default=False, verbose_name='Consider Most Events Completed')),
                ('consider_primes', models.BooleanField(default=True, verbose_name='Consider Points or Time Primes')),
                ('best_results_to_consider', models.PositiveSmallIntegerField(choices=[(0, 'All Results'), (1, 'Best Result Only'), (2, '2 Best Results Only'), (3, '3 Best Results Only'), (4, '4 Best Results Only'), (5, '5 Best Results Only'), (6, '6 Best Results Only'), (7, '7 Best Results Only'), (8, '8 Best Results Only'), (9, '9 Best Results Only'), (10, '10 Best Results Only'), (11, '11 Best Results Only'), (12, '12 Best Results Only'), (13, '13 Best Results Only'), (14, '14 Best Results Only'), (15, '15 Best Results Only'), (16, '16 Best Results Only'), (17, '17 Best Results Only'), (18, '18 Best Results Only'), (19, '19 Best Results Only'), (20, '20 Best Results Only'), (21, '21 Best Results Only'), (22, '22 Best Results Only'), (23, '23 Best Results Only'), (24, '24 Best Results Only'), (25, '25 Best Results Only'), (26, '26 Best Results Only'), (27, '27 Best Results Only'), (28, '28 Best Results Only'), (29, '29 Best Results Only'), (30, '30 Best Results Only')], default=0, verbose_name='Consider')),
                ('must_have_completed', models.PositiveSmallIntegerField(choices=[(0, '0 or more Events'), (1, '1 or more Events'), (2, '2 or more Events'), (3, '3 or more Events'), (4, '4 or more Events'), (5, '5 or more Events'), (6, '6 or more Events'), (7, '7 or more Events'), (8, '8 or more Events'), (9, '9 or more Events'), (10, '10 or more Events'), (11, '11 or more Events'), (12, '12 or more Events'), (13, '13 or more Events'), (14, '14 or more Events'), (15, '15 or more Events'), (16, '16 or more Events'), (17, '17 or more Events'), (18, '18 or more Events'), (19, '19 or more Events'), (20, '20 or more Events'), (21, '21 or more Events'), (22, '22 or more Events'), (23, '23 or more Events'), (24, '24 or more Events'), (25, '25 or more Events'), (26, '26 or more Events'), (27, '27 or more Events'), (28, '28 or more Events'), (29, '29 or more Events'), (30, '30 or more Events')], default=0, verbose_name='Must have completed')),
                ('callup_max', models.PositiveSmallIntegerField(default=0, verbose_name='Callup Maximum')),
                ('randomize_if_no_results', models.BooleanField(default=False, verbose_name='Randomize callups if no results')),
                ('category_format', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.CategoryFormat')),
            ],
            options={
                'verbose_name': 'Series',
                'verbose_name_plural': 'Series',
                'ordering': ['sequence'],
            },
        ),
        migrations.CreateModel(
            name='SystemInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag_creation', models.PositiveSmallIntegerField(choices=[(0, 'Universally Unique'), (1, 'From Database ID'), (2, 'From License Code')], default=0, help_text='Specify how to create RFID tags.', verbose_name='Tag Creation')),
                ('tag_bits', models.PositiveSmallIntegerField(choices=[(64, '64'), (96, '96')], default=96, help_text='EPC Bits available if generating Universally Unique tags.', verbose_name='EPC Bits per Tag')),
                ('tag_template', models.CharField(help_text='Template if generating tags from Database ID.', max_length=24, verbose_name='Tag Template')),
                ('tag_from_license', models.BooleanField(default=False, help_text='Generate RFID tag from license (not database id)', verbose_name='RFID Tag from License')),
                ('tag_from_license_id', models.PositiveSmallIntegerField(choices=[(0, '0'), (1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10'), (11, '11'), (12, '12'), (13, '13'), (14, '14'), (15, '15'), (16, '16'), (17, '17'), (18, '18'), (19, '19'), (20, '20'), (21, '21'), (22, '22'), (23, '23'), (24, '24'), (25, '25'), (26, '26'), (27, '27'), (28, '28'), (29, '29'), (30, '30'), (31, '31')], default=0, help_text='Identifier for generating tags from License Code.', verbose_name='Identifier')),
                ('tag_all_hex', models.BooleanField(default=True, help_text='Set to True if all tags characters are in [0-9A-F]', verbose_name='RFID Tag all Hex')),
                ('rfid_server_host', models.CharField(default='localhost', max_length=32, verbose_name='RFID Reader Server Host')),
                ('rfid_server_port', models.PositiveIntegerField(default=50111, verbose_name='RFID Reader Server Port')),
                ('reg_closure_minutes', models.IntegerField(default=-1, help_text='Minutes before race start to close registration for "reg" users.  Use -1 for None.', verbose_name='Reg Closure Minutes')),
                ('exclude_empty_categories', models.BooleanField(default=True, help_text='Exclude empty categories from CrossMgr Excel', verbose_name='Exclude Empty Categories from CrossMgr')),
                ('reg_allow_add_multiple_categories', models.BooleanField(default=True, help_text='If True, reg staff can add participants to Multiple Categories (eg. race up a catgegory).  If False, only "super" can do so.', verbose_name='Allow "reg" to Add Participants to Multiple Categories')),
                ('license_code_regex', models.CharField(blank=True, default='', help_text='Must include a license_code field.  For example, "[^;]*;(?P&lt;license_code&gt;[^?]*).*"', max_length=160, verbose_name='License Code Regex')),
                ('print_tag_option', models.PositiveSmallIntegerField(choices=[(0, 'No Bib Tag Print (Hide Print Bib Tag Button)'), (1, 'Print Bib Tag on Server (use command)'), (2, 'Print Bib Tag on Client (print from browser)')], default=0, verbose_name='Print Tag Option')),
                ('server_print_tag_cmd', models.CharField(default='lpr "$1"', max_length=160, verbose_name='Cmd used to print Bib Tag (parameter is the PDF file)')),
                ('cloud_server_url', models.CharField(blank=True, default='', max_length=160, verbose_name='Cloud Server Url')),
                ('license_holder_unique_by_license_code', models.BooleanField(default=True, help_text='If True, License Holders will be Merged assuming that License Codes are permanent and unique.  Otherwise, ignore and attempt to match by Last, First, Gender and DOB', verbose_name='License Codes Permanent and Unique')),
            ],
            options={
                'verbose_name': 'SystemInfo',
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=128, verbose_name='Name')),
                ('team_code', models.CharField(blank=True, db_index=True, max_length=16, verbose_name='Team Code')),
                ('team_type', models.PositiveSmallIntegerField(choices=[(0, 'Club'), (1, 'Regional'), (2, 'Mixed'), (3, 'National'), (4, 'UCI Women'), (5, 'UCI Continental'), (6, 'UCI Pro Continental'), (7, 'UCI Pro')], default=0, verbose_name='Type')),
                ('nation_code', models.CharField(blank=True, default='', max_length=3, verbose_name='Nation Code')),
                ('active', models.BooleanField(default=True, verbose_name='Active')),
                ('search_text', models.CharField(blank=True, db_index=True, default='', max_length=80)),
                ('contact', models.CharField(blank=True, default='', max_length=64, verbose_name='Contact')),
                ('contact_email', models.EmailField(blank=True, max_length=254, verbose_name='Contact Email')),
                ('contact_phone', models.CharField(blank=True, default='', max_length=64, verbose_name='Contact Phone')),
                ('was_team', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='is_now_team', to='core.Team', verbose_name='Was Team')),
            ],
            options={
                'verbose_name': 'Team',
                'verbose_name_plural': 'Teams',
                'ordering': ['search_text'],
            },
        ),
        migrations.CreateModel(
            name='UpdateLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created')),
                ('update_type', models.PositiveSmallIntegerField(choices=[(0, 'MergeLicenseHolders'), (1, 'MergeTeams')], verbose_name='Update Type')),
                ('description', models.TextField(verbose_name='Description')),
            ],
            options={
                'verbose_name': 'UpdateLog',
                'verbose_name_plural': 'UpdateLog',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='Wave',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('distance', models.FloatField(blank=True, null=True, verbose_name='Distance')),
                ('laps', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Laps')),
                ('max_participants', models.PositiveIntegerField(blank=True, null=True, verbose_name='Max Participants')),
                ('rank_categories_together', models.BooleanField(default=False, help_text='If False, Categories in the Wave will be ranked seperately.  If True, all Categories in the Wave will be ranked together.', verbose_name='Rank Categories Together')),
                ('start_offset', core.DurationField.DurationField(default="0:00", verbose_name='Start Offset')),
                ('minutes', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Race Minutes')),
                ('categories', models.ManyToManyField(to='core.Category', verbose_name='Categories')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.EventMassStart')),
            ],
            options={
                'verbose_name': 'Wave',
                'verbose_name_plural': 'Waves',
                'ordering': ['start_offset', 'name'],
            },
        ),
        migrations.CreateModel(
            name='WaveTT',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('distance', models.FloatField(blank=True, null=True, verbose_name='Distance')),
                ('laps', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Laps')),
                ('max_participants', models.PositiveIntegerField(blank=True, null=True, verbose_name='Max Participants')),
                ('rank_categories_together', models.BooleanField(default=False, help_text='If False, Categories in the Wave will be ranked seperately.  If True, all Categories in the Wave will be ranked together.', verbose_name='Rank Categories Together')),
                ('sequence', models.PositiveSmallIntegerField(default=0, verbose_name='Sequence')),
                ('gap_before_wave', core.DurationField.DurationField(default="5:00", verbose_name='Gap Before Wave')),
                ('regular_start_gap', core.DurationField.DurationField(default="1:00", verbose_name='Regular Start Gap')),
                ('fastest_participants_start_gap', core.DurationField.DurationField(default="2:00", verbose_name='Fastest Participants Start Gap')),
                ('num_fastest_participants', models.PositiveSmallIntegerField(choices=[(0, '0'), (1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10'), (11, '11'), (12, '12'), (13, '13'), (14, '14'), (15, '15')], default=5, help_text='Participants to get the Fastest gap', verbose_name='Number of Fastest Participants')),
                ('sequence_option', models.PositiveSmallIntegerField(choices=[('Increasing', ((0, 'Est. Speed - Increasing'), (1, 'Youngest to Oldest'), (2, 'Bib - Increasing'))), ('Decreasing', ((3, 'Oldest to Youngest'), (4, 'Bib - Decreasing'))), ('Series', ((5, 'Series Rank'),))], default=0, help_text='Criteria used to order participants in the wave', verbose_name='Sequence Option')),
                ('categories', models.ManyToManyField(to='core.Category', verbose_name='Categories')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.EventTT')),
                ('series_for_seeding', models.ForeignKey(blank=True, help_text='Must be specified if Sequence Option is Series', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.Series', verbose_name='Series for Seeding')),
            ],
            options={
                'verbose_name': 'TTWave',
                'verbose_name_plural': 'TTWaves',
                'ordering': ['sequence'],
            },
        ),
        migrations.CreateModel(
            name='WaveCallup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveSmallIntegerField(blank=True, default=9999, verbose_name='Callup Order')),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Participant')),
                ('wave', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Wave')),
            ],
            options={
                'verbose_name': 'WaveCallup',
                'verbose_name_plural': 'WaveCallups',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='TeamHint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('effective_date', models.DateField(db_index=True, verbose_name='Effective Date')),
                ('discipline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Discipline')),
                ('license_holder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.LicenseHolder')),
                ('team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Team')),
            ],
            options={
                'verbose_name': 'TeamHint',
                'verbose_name_plural': 'TeamHints',
            },
        ),
        migrations.CreateModel(
            name='TeamAlias',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alias', models.CharField(db_index=True, max_length=64, verbose_name='Alias')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Team')),
            ],
            options={
                'verbose_name': 'Team Alias',
                'verbose_name_plural': 'Team Aliases',
                'ordering': ['team__search_text'],
            },
        ),
        migrations.CreateModel(
            name='SeriesUpgradeProgression',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequence', models.PositiveSmallIntegerField(blank=True, default=32767, verbose_name='Sequence')),
                ('factor', models.FloatField(default=0.5, verbose_name='Factor')),
                ('series', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Series')),
            ],
            options={
                'verbose_name': 'SeriesUpgradeProgression',
                'verbose_name_plural': 'SeriesUpgradeProgressions',
            },
        ),
        migrations.CreateModel(
            name='SeriesUpgradeCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequence', models.PositiveSmallIntegerField(blank=True, default=32767, verbose_name='Sequence')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Category')),
                ('upgrade_progression', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.SeriesUpgradeProgression')),
            ],
            options={
                'verbose_name': 'SeriesUpgradeCategory',
                'verbose_name_plural': 'SeriesUpgradeCategories',
            },
        ),
        migrations.CreateModel(
            name='SeriesPointsStructure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequence', models.PositiveSmallIntegerField(blank=True, default=32767, verbose_name='Sequence')),
                ('name', models.CharField(default='SeriesPoints', max_length=32, verbose_name='Name')),
                ('points_for_place', models.CharField(default='30,25,20,15,10,5,3,1,1,1', max_length=512, verbose_name='Points for Place')),
                ('finish_points', models.PositiveSmallIntegerField(default=0, verbose_name='Finish Points')),
                ('dnf_points', models.PositiveSmallIntegerField(default=0, verbose_name='DNF Points')),
                ('dns_points', models.PositiveSmallIntegerField(default=0, verbose_name='DNS Points')),
                ('series', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Series')),
            ],
            options={
                'verbose_name': 'PointsStructure',
                'verbose_name_plural': 'PointsStructures',
            },
        ),
        migrations.CreateModel(
            name='SeriesIncludeCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Category')),
                ('series', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Series')),
            ],
            options={
                'verbose_name': 'SeriesIncludeCategory',
                'verbose_name_plural': 'SeriesIncludeCategories',
                'ordering': ['category__sequence'],
            },
        ),
        migrations.CreateModel(
            name='SeriesCompetitionEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_mass_start', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.EventMassStart')),
                ('event_tt', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.EventTT')),
                ('points_structure', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.SeriesPointsStructure')),
                ('series', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Series')),
            ],
            options={
                'verbose_name': 'SeriesCompetitionEvent',
                'verbose_name_plural': 'SeriesCompetitionEvents',
            },
        ),
        migrations.CreateModel(
            name='ResultTT',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Finisher'), (1, 'PUL'), (2, 'OTB'), (3, 'DNF'), (4, 'DQ'), (5, 'DNS'), (6, 'NP')], default=0, verbose_name='Status')),
                ('category_rank', models.PositiveSmallIntegerField(default=32000, verbose_name='Category Rank')),
                ('category_starters', models.PositiveSmallIntegerField(default=0, verbose_name='Category Starters')),
                ('category_gap', models.CharField(blank=True, default='', max_length=8)),
                ('wave_rank', models.PositiveSmallIntegerField(default=32000, verbose_name='Wave Rank')),
                ('wave_starters', models.PositiveSmallIntegerField(default=0, verbose_name='Wave Starters')),
                ('wave_gap', models.CharField(blank=True, default='', max_length=8)),
                ('finish_time', core.DurationField.DurationField(blank=True, null=True, verbose_name='Finish Time')),
                ('adjustment_time', core.DurationField.DurationField(blank=True, default="0:00", null=True, verbose_name='Adjustment Time')),
                ('adjustment_note', models.CharField(blank=True, default='', max_length=128, verbose_name='Adjustment Note')),
                ('ave_kmh', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Ave km/h')),
                ('points', models.SmallIntegerField(default=0, verbose_name='Points')),
                ('time_bonus', core.DurationField.DurationField(blank=True, null=True, verbose_name='Time Bonus')),
                ('relegated', models.BooleanField(default=False, verbose_name='Relegated')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.EventTT')),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Participant')),
            ],
            options={
                'verbose_name': 'ResultTT',
                'verbose_name_plural': 'ResultsTT',
                'unique_together': {('participant', 'event')},
            },
        ),
        migrations.CreateModel(
            name='ResultMassStart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Finisher'), (1, 'PUL'), (2, 'OTB'), (3, 'DNF'), (4, 'DQ'), (5, 'DNS'), (6, 'NP')], default=0, verbose_name='Status')),
                ('category_rank', models.PositiveSmallIntegerField(default=32000, verbose_name='Category Rank')),
                ('category_starters', models.PositiveSmallIntegerField(default=0, verbose_name='Category Starters')),
                ('category_gap', models.CharField(blank=True, default='', max_length=8)),
                ('wave_rank', models.PositiveSmallIntegerField(default=32000, verbose_name='Wave Rank')),
                ('wave_starters', models.PositiveSmallIntegerField(default=0, verbose_name='Wave Starters')),
                ('wave_gap', models.CharField(blank=True, default='', max_length=8)),
                ('finish_time', core.DurationField.DurationField(blank=True, null=True, verbose_name='Finish Time')),
                ('adjustment_time', core.DurationField.DurationField(blank=True, default="0:00", null=True, verbose_name='Adjustment Time')),
                ('adjustment_note', models.CharField(blank=True, default='', max_length=128, verbose_name='Adjustment Note')),
                ('ave_kmh', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Ave km/h')),
                ('points', models.SmallIntegerField(default=0, verbose_name='Points')),
                ('time_bonus', core.DurationField.DurationField(blank=True, null=True, verbose_name='Time Bonus')),
                ('relegated', models.BooleanField(default=False, verbose_name='Relegated')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.EventMassStart')),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Participant')),
            ],
            options={
                'verbose_name': 'ResultMassStart',
                'verbose_name_plural': 'ResultsMassStart',
                'unique_together': {('participant', 'event')},
            },
        ),
        migrations.CreateModel(
            name='RaceTimeTT',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('race_time', core.DurationField.DurationField(verbose_name='Race Time')),
                ('lap_kmh', models.FloatField(blank=True, default=0.0, verbose_name='Lap km/h')),
                ('result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.ResultTT', verbose_name='ResultTT')),
            ],
            options={
                'verbose_name': 'RaceTimeTT',
                'verbose_name_plural': 'RaceTimesTT',
            },
        ),
        migrations.CreateModel(
            name='RaceTimeMassStart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('race_time', core.DurationField.DurationField(verbose_name='Race Time')),
                ('lap_kmh', models.FloatField(blank=True, default=0.0, verbose_name='Lap km/h')),
                ('result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.ResultMassStart', verbose_name='ResultMassStart')),
            ],
            options={
                'verbose_name': 'RaceTimeMassStart',
                'verbose_name_plural': 'RaceTimesMassStart',
            },
        ),
        migrations.AddField(
            model_name='participant',
            name='team',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.Team'),
        ),
        migrations.CreateModel(
            name='NumberSetEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bib', models.PositiveSmallIntegerField(db_index=True, verbose_name='Bib')),
                ('date_issued', models.DateField(db_index=True, default=None, null=True, verbose_name='Date Issued')),
                ('date_lost', models.DateField(db_index=True, default=None, null=True, verbose_name='Date Lost')),
                ('license_holder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.LicenseHolder')),
                ('number_set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.NumberSet')),
            ],
            options={
                'verbose_name': 'NumberSetEntry',
                'verbose_name_plural': 'NumberSetEntries',
            },
        ),
        migrations.CreateModel(
            name='LicenseCheckState',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_date', models.DateField(db_index=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Category')),
                ('discipline', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='core.Discipline')),
                ('license_holder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.LicenseHolder')),
                ('report_label_license_check', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.ReportLabel')),
            ],
        ),
        migrations.CreateModel(
            name='CustomCategoryTT',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequence', models.PositiveSmallIntegerField(blank=True, default=32767, verbose_name='Sequence')),
                ('name', models.CharField(max_length=80, verbose_name='Name')),
                ('range_str', models.CharField(blank=True, default='', help_text='e.g. 1-199, -35-45', max_length=128, verbose_name='Bib Ranges')),
                ('nation_code_str', models.CharField(blank=True, default='', help_text='3-letter IOC Country Codes, comma separated', max_length=128, verbose_name='Nation Codes')),
                ('gender', models.PositiveSmallIntegerField(choices=[(0, 'Men'), (1, 'Women'), (2, 'All')], default=2, verbose_name='Gender')),
                ('license_code_prefixes', models.CharField(blank=True, default='', help_text='e.g. "ON,BC" comma separated', max_length=32, verbose_name='License Code Prefixes')),
                ('state_prov_str', models.CharField(blank=True, default='', help_text='States or Provinces, comma separated', max_length=128, verbose_name='State/Provs')),
                ('competitive_age_minimum', models.PositiveSmallIntegerField(blank=True, default=None, null=True, verbose_name='Competitive Age Min')),
                ('competitive_age_maximum', models.PositiveSmallIntegerField(blank=True, default=None, null=True, verbose_name='Competitive Age Max')),
                ('date_of_birth_minimum', models.DateField(blank=True, default=None, null=True, verbose_name='Born After')),
                ('date_of_birth_maximum', models.DateField(blank=True, default=None, null=True, verbose_name='Born Before')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.EventTT', verbose_name='EventTT')),
            ],
            options={
                'verbose_name': 'CustomCategoryTT',
                'verbose_name_plural': 'CustomCategoriesTT',
            },
        ),
        migrations.CreateModel(
            name='CustomCategoryMassStart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequence', models.PositiveSmallIntegerField(blank=True, default=32767, verbose_name='Sequence')),
                ('name', models.CharField(max_length=80, verbose_name='Name')),
                ('range_str', models.CharField(blank=True, default='', help_text='e.g. 1-199, -35-45', max_length=128, verbose_name='Bib Ranges')),
                ('nation_code_str', models.CharField(blank=True, default='', help_text='3-letter IOC Country Codes, comma separated', max_length=128, verbose_name='Nation Codes')),
                ('gender', models.PositiveSmallIntegerField(choices=[(0, 'Men'), (1, 'Women'), (2, 'All')], default=2, verbose_name='Gender')),
                ('license_code_prefixes', models.CharField(blank=True, default='', help_text='e.g. "ON,BC" comma separated', max_length=32, verbose_name='License Code Prefixes')),
                ('state_prov_str', models.CharField(blank=True, default='', help_text='States or Provinces, comma separated', max_length=128, verbose_name='State/Provs')),
                ('competitive_age_minimum', models.PositiveSmallIntegerField(blank=True, default=None, null=True, verbose_name='Competitive Age Min')),
                ('competitive_age_maximum', models.PositiveSmallIntegerField(blank=True, default=None, null=True, verbose_name='Competitive Age Max')),
                ('date_of_birth_minimum', models.DateField(blank=True, default=None, null=True, verbose_name='Born After')),
                ('date_of_birth_maximum', models.DateField(blank=True, default=None, null=True, verbose_name='Born Before')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.EventMassStart', verbose_name='EventMassSart')),
            ],
            options={
                'verbose_name': 'CustomCategoryMassStart',
                'verbose_name_plural': 'CustomCategoriesMassStart',
            },
        ),
        migrations.AddField(
            model_name='competition',
            name='discipline',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Discipline', verbose_name='Discipline'),
        ),
        migrations.AddField(
            model_name='competition',
            name='legal_entity',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.LegalEntity', verbose_name='Legal Entity'),
        ),
        migrations.AddField(
            model_name='competition',
            name='number_set',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.NumberSet', verbose_name='Number Set'),
        ),
        migrations.AddField(
            model_name='competition',
            name='race_class',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.RaceClass', verbose_name='Race Class'),
        ),
        migrations.AddField(
            model_name='competition',
            name='report_label_license_check',
            field=models.ForeignKey(blank=True, help_text='Previous Competitions considered for License Check must have this label', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.ReportLabel', verbose_name='Report Label License Check'),
        ),
        migrations.AddField(
            model_name='competition',
            name='report_labels',
            field=models.ManyToManyField(blank=True, to='core.ReportLabel', verbose_name='Report Labels'),
        ),
        migrations.AddField(
            model_name='competition',
            name='seasons_pass',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.SeasonsPass', verbose_name="Season's Pass"),
        ),
        migrations.CreateModel(
            name='CategoryNumbers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('range_str', models.TextField(default='1-99,120-129,-50-60,181,-87', verbose_name='Range')),
                ('categories', models.ManyToManyField(to='core.Category')),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Competition')),
            ],
            options={
                'verbose_name': 'CategoryNumbers',
                'verbose_name_plural': 'CategoriesNumbers',
            },
        ),
        migrations.CreateModel(
            name='CategoryHint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('effective_date', models.DateField(db_index=True, verbose_name='Effective Date')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Category')),
                ('discipline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Discipline')),
                ('license_holder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.LicenseHolder')),
            ],
            options={
                'verbose_name': 'CategoryHint',
                'verbose_name_plural': 'CategoryHints',
            },
        ),
        migrations.CreateModel(
            name='CategoryGroupElement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Category')),
                ('category_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.CategoryGroup')),
            ],
            options={
                'verbose_name': 'CategoryGroupElement',
                'verbose_name_plural': 'CategoryGroupElements',
                'ordering': ['category__sequence'],
            },
        ),
        migrations.AddField(
            model_name='categorygroup',
            name='series',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Series'),
        ),
        migrations.AddField(
            model_name='category',
            name='format',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.CategoryFormat'),
        ),
        migrations.CreateModel(
            name='Waiver',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_signed', models.DateField(db_index=True, default=None, null=True, verbose_name='Waiver Signed on')),
                ('legal_entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.LegalEntity')),
                ('license_holder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.LicenseHolder')),
            ],
            options={
                'verbose_name': 'Waiver',
                'verbose_name_plural': 'Waivers',
                'unique_together': {('license_holder', 'legal_entity')},
            },
        ),
        migrations.CreateModel(
            name='SeasonsPassHolder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('license_holder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.LicenseHolder', verbose_name='LicenseHolder')),
                ('seasons_pass', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.SeasonsPass', verbose_name="Season's Pass")),
            ],
            options={
                'verbose_name': "Season's Pass Holder",
                'verbose_name_plural': "Season's Pass Holders",
                'ordering': ['license_holder__search_text'],
                'unique_together': {('seasons_pass', 'license_holder')},
            },
        ),
        migrations.CreateModel(
            name='ParticipantOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option_id', models.PositiveIntegerField(verbose_name='Option Id')),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Competition')),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Participant')),
            ],
            options={
                'verbose_name': 'Participant Option',
                'verbose_name_plural': 'Participant Options',
                'indexes': [models.Index(fields=['competition', 'participant', 'option_id'], name='core_partic_competi_36c115_idx'), models.Index(fields=['competition', 'participant'], name='core_partic_competi_c665bb_idx'), models.Index(fields=['competition', 'option_id'], name='core_partic_competi_21c187_idx')],
                'unique_together': {('competition', 'participant', 'option_id')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='participant',
            unique_together={('competition', 'category', 'license_holder'), ('competition', 'category', 'tag2'), ('competition', 'category', 'tag'), ('competition', 'category', 'bib')},
        ),
        migrations.CreateModel(
            name='EntryTT',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('est_speed', models.FloatField(default=0.0, verbose_name='Est. Speed')),
                ('hint_sequence', models.PositiveIntegerField(default=0, verbose_name='Hint Sequence')),
                ('start_sequence', models.PositiveIntegerField(db_index=True, default=0, verbose_name='Start Sequence')),
                ('start_time', core.DurationField.DurationField(blank=True, null=True, verbose_name='Start Time')),
                ('finish_time', core.DurationField.DurationField(blank=True, null=True, verbose_name='Finish Time')),
                ('adjustment_time', core.DurationField.DurationField(blank=True, null=True, verbose_name='Adjustment Time')),
                ('adjustment_note', models.CharField(default='', max_length=128, verbose_name='Adjustment Note')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.EventTT', verbose_name='Event')),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Participant', verbose_name='Participant')),
            ],
            options={
                'verbose_name': 'Time Trial Entry',
                'verbose_name_plural': 'Time Trial Entry',
                'indexes': [models.Index(fields=['event', 'start_sequence'], name='core_entryt_event_i_f9f4e7_idx')],
                'ordering': ['start_time'],
                'unique_together': {('event', 'participant')},
            },
        ),
        migrations.CreateModel(
            name='CompetitionCategoryOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('license_check_required', models.BooleanField(default=False, verbose_name='License Check Required')),
                ('note', models.CharField(blank=True, default='', max_length=160, verbose_name='Note')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Category')),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Competition')),
            ],
            options={
                'verbose_name': 'CompetitionCategoryOption',
                'unique_together': {('competition', 'category')},
            },
        ),
    ]
