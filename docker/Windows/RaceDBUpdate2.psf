<File version="3.1">
  <FileID>12b6f91c-7ddb-4a7f-8ceb-3a9031ed5569</FileID>
  <Preview>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
MAqAiIhIAaMAiIiIFDAKgIiISAHziReAU6dOxeuvvy4iIiIXMavN4HPziRaAPPxPnDgR8/Pzsbi4
KCIiIhc4S0tLMTMzEydPnizN3dXmcc4nWgDeeOONmJ2djcceeyxuueWWuPXWW0VEROQC5oYbboh1
69bFW2+9FadPn151Hud84gUgr/5vuummKC8vj8HBQREREbmA6e/vj8nJyXjnnXcurSsAuQDk1f/4
+HgAABdenrc5l2QBGBkZOXOaAMCFlGfum2++qQAAQJHkmasAAEDB5JmrAABAweSZqwAAQMHkmasA
AEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAA
QMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABA
weSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB
5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHk
masAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZ
qwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5Jmr
AABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasA
AEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAA
QMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABA
weSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB
5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHk
masAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZ
qwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5Jmr
AABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasA
AEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAA
QMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABA
weSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB
5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHk
masAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZ
qwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5Jmr
AABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasA
AEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAAQMHkmasAAEDB5JmrAABAweSZqwAA
QMHkmXvJFYCFhYW4/vrrY3h4+MxpAgAXUh78l1wBmJqaikcffTTGxsbi9ddfFxERkQucI0eOxFtv
vXXpFIB8IkePHo0TJ07Ez372s1VPWkRERD5e8ur/nXfeWXUWr+QTLQA5p0+fLp3YaicsIiIiFya/
bvWf84kXABEREfnNRwEQEREpYBQAERGRAkYBEBERKWAUABERkQJGARARkfNO/r0u+efM8091Xa7J
559/Mu39zy2/e/5yf245+Wv0/ud2bhQAERE5r+ShefDgwejp6Ym+vr7LNr29vaVfT59/ZO7c57a0
tLTq9pdT8tcm/8r91QrOShQAERE5r+SVZXNzc3R1dcXg4GDs3bv3ssu+ffuivr6+NCTzavnc5zY+
Ph61tbWlbVbb91JP/prkctPQ0KAAiIjIhUteMbe3t8fo6GjMzc3F7Ozsh8rMzGzMLSzEwsJ8zM7M
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</Preview>
  <Form>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</Form>
  <Code><![CDATA[
 
#region FindFunction
function FindText
{	
	if($textboxFind.Text.Length -eq 0)
	{
		return
	}
	
	$index = $richtextboxOutput.Find($textboxFind.Text,$richtextboxOutput.SelectionStart+ $richtextboxOutput.SelectedText.Length,[System.Windows.Forms.RichTextBoxFinds]::None)
	if($index -ge 0)
	{	
		$richtextboxOutput.Select($index,$textboxFind.Text.Length)
		$richtextboxOutput.ScrollToCaret()
		#$richtextbox1.Focus()
	}
	else
	{
		$index = $richtextboxOutput.Find($textboxFind.Text,0,$richtextboxOutput.SelectionStart,[System.Windows.Forms.RichTextBoxFinds]::None)
		#
		if($index -ge 0)
		{	
			$richtextboxOutput.Select($index,$textboxFind.Text.Length)
			$richtextboxOutput.ScrollToCaret()
			#$richtextbox1.Focus()
		}
		else
		{
			$richtextboxOutput.SelectionStart = 0
		}
	}
	
}
#endregion

$formUpdate_Load={
	$richtextboxOutput.Text = "By clicking Update, the current version of the RaceDB container will be pulled from hub.docker.com. If there is a newer version, it will be downloaded to your machine. You must restart RaceDB to use the new version. You will not lose any settings or data by updating."

}

$buttonClose_Click={
	#TODO: Place custom script here
	$formUpdate.Close()
}

$textboxFind_TextChanged={
	$buttonFind.Enabled = $textboxFind.Text.Length -gt 0
}

$processTracker_FormClosed=[System.Windows.Forms.FormClosedEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.FormClosedEventArgs]
	#Stop any pending processes
	#Stop-ProcessTracker
}

$buttonRunUpdate_Click= {
	$buttonRunUpdate.Enabled = $false
	
	#Clear the output
	$richtextboxOutput.Clear()

	#TODO: Set the process path here
	$paramAddProcessTracker = @{
		FilePath						  = 'docker-compose'
		Arguments						  = '--ansi never pull'
		SyncObject						  = $buttonRunUpdate
		RedirectOutputScript			  = {
			# Use $_.Data to access the output text
			$richtextboxOutput.AppendText($_.Data)
			$richtextboxOutput.AppendText("`r`n")
		}
		RedirectErrorScript					  = {
			if ($_.Data)
			{
				# Use $_.Data to access the output text
				# Use red to display errors
				$colorOld = $richtextboxOutput.SelectionColor;
				$richtextboxOutput.SelectionColor = 'Red'
				$richtextboxOutput.AppendText($_.Data)
				$richtextboxOutput.AppendText("`r`n")
				$richtextboxOutput.SelectionColor = $colorOld
			}
		}
		CompletedScript				      = {
			$buttonRunUpdate.Enabled = $true
			$buttonRunUpdate.ImageIndex = -1
		}
		UpdateScript					  = {
			#Animate the Button
			if ($null -ne $buttonRunUpdate.ImageList)
			{
				if ($buttonRunUpdate.ImageIndex -lt $buttonRunUpdate.ImageList.Images.Count - 1)
				{
					$buttonRunUpdate.ImageIndex += 1
				}
				else
				{
					$buttonRunUpdate.ImageIndex = 0
				}
			}
		}
	}
	
	Add-ProcessTracker @paramAddProcessTracker
	
}

$timerProcessTracker_Tick={
	Update-ProcessTracker
}

#region Process Tracker
function Stop-ProcessTracker
{
	<#
		.SYNOPSIS
			Stops and removes all processes from the list.
	#>
	#Stop the timer
	$timerProcessTracker.Stop()
	
	#Remove all the processes
	while($ProcessTrackerList.Count -gt 0)
	{
		$process = $ProcessTrackerList[0].Process
		$ProcessTrackerList.RemoveAt(0)
		if(-not $process.HasExited)
		{
			Stop-Process -InputObject $process
		}
	}
}

function Update-ProcessTracker
{
	<#
		.SYNOPSIS
			Checks the status of each job on the list.
	#>
	
	#Poll the jobs for status updates
	$timerProcessTracker.Stop() #Freeze the Timer
	
	for($index =0; $index -lt $ProcessTrackerList.Count; $index++)
	{
		$psObject = $ProcessTrackerList[$index]
		
		if($null -ne $psObject) 
		{
			if($null -ne $psObject.Process)
			{
				if($psObject.Process.HasExited)
				{
					#Call the Complete Script Block
					if($null -ne $psObject.CompleteScript)
					{
						#$results = Receive-Job -Job $psObject.Job
						Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Process
					}
					
					$ProcessTrackerList.RemoveAt($index)
					$index-- #Step back so we don't skip a job
				}
				elseif($null -ne $psObject.UpdateScript)
				{
					#Call the Update Script Block
					Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Process
				}
			}
		}
		else
		{
			$ProcessTrackerList.RemoveAt($index)
			$index-- #Step back so we don't skip a job
		}
	}
	
	if($ProcessTrackerList.Count -gt 0)
	{
		$timerProcessTracker.Start()#Resume the timer
	}
}

$ProcessTrackerList = New-Object System.Collections.ArrayList
function Add-ProcessTracker
{
	<#
		.SYNOPSIS
			Add a new process to the ProcessTracker and starts the timer.
	
		.DESCRIPTION
			Add a new process to the ProcessTracker and starts the timer.
	
		.PARAMETER  FilePath
			The path to executable.
	
		.PARAMETER ArgumentList
			The arguments to pass to the process.
	
		.PARAMETER CompletedScript
			The script block that will be called when the process is complete.
			The process is passed as an argument. The process argument is null when the job fails.
	
		.PARAMETER UpdateScript
			The script block that will be called each time the timer ticks.
			The process is passed as an argument.
	
		.PARAMETER RedirectOutputScript
			The script block that handles output from the process.
			Use $_.Data to access the output text.
	
		.PARAMETER RedirectErrorScript
			The script block that handles error output from the process.
			Use $_.Data to access the output text.
	
		.PARAMETER NoNewWindow
			Start the new process in the current console window.
	
		.PARAMETER WindowStyle
			Specifies the state of the window that is used for the new process. 
			Valid values are Normal, Hidden, Minimized, and Maximized. 
			The default value is Normal.
	
		.PARAMETER WorkingDirectory
			Specifies the location of the executable file or document that runs in the process. 
			The default is the current directory.
	
		.PARAMETER RedirectInput
			Redirects the input of the process. If this switch is set, the function will return the process object.
			Use the process object's StandardInput property to access the input stream.
	
		.PARAMETER PassThru
			Returns the process that was started.
	
		.PARAMETER SyncObject
			The object used to marshal the process event handler calls that are issued.
			You must pass a control to sync otherwise it will produce an error when redirecting output.

		.EXAMPLE
			 Add-ProcessTracker -FilePath 'notepad.exe' `
			-SyncObject $form1 `
			-CompletedScript {
				Param([System.Diagnostics.Process]$Process)
				$button.Enable = $true
			}`
			-UpdateScript {
				Param([System.Diagnostics.Process]$Process)
				Function-Animate $button
			}`
			-RedirectOutputScript { 
			# Use $_.Data to access the output text
				$textBox1.AppendText($_.Data)
				$textBox1.AppendText("`r`n")
			}
		.EXAMPLE
			$process = Add-ProcessTracker -FilePath 'powershell.exe' `
			-RedirectInput `
			-SyncObject $buttonRunProcess `
			-RedirectOutputScript {
				# Use $_.Data to access the output text
				$richtextbox1.AppendText($_.Data)
				$richtextbox1.AppendText("`r`n")
			}
			
			#Write to the console
			$process.StandardInput.WriteLine("Get-Process")
	
		.OUTPUTS
			 System.Diagnostics.Process
	#>
	
	[OutputType([System.Diagnostics.Process])]
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[string]$FilePath,
		[string]$Arguments,
		[string]$WorkingDirectory,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.ISynchronizeInvoke]$SyncObject,
		[ScriptBlock]$CompletedScript,
		[ScriptBlock]$UpdateScript,
		[ScriptBlock]$RedirectOutputScript,
		[ScriptBlock]$RedirectErrorScript,
		[System.Diagnostics.ProcessWindowStyle]$WindowStyle = 'Normal',
		[switch]$RedirectInput,
		[switch]$NoNewWindow,
		[switch]$PassThru
	)
	
	#Start the Process
	try
	{
		$process = New-Object System.Diagnostics.Process
		$process.StartInfo.FileName = $FilePath
		$process.StartInfo.WindowStyle = $WindowStyle
		
		if ($NoNewWindow)
		{
			$process.StartInfo.CreateNoWindow = $true
		}
		
		if ($WorkingDirectory)
		{
		 	$process.StartInfo.WorkingDirectory = $WorkingDirectory
		}
		
		#Handle Redirection
		if ($RedirectErrorScript)
		{
			$process.EnableRaisingEvents = $true
			$process.StartInfo.UseShellExecute = $false
			$process.StartInfo.RedirectStandardError = $true
			$process.StartInfo.CreateNoWindow = $true
			$process.add_ErrorDataReceived($RedirectErrorScript)
		}
		
		if ($RedirectOutputScript)
		{
			$process.StartInfo.UseShellExecute = $false
			$process.StartInfo.RedirectStandardOutput = $true
			$process.add_OutputDataReceived($RedirectOutputScript)
		}
		
		if($RedirectInput)
		{
			$process.EnableRaisingEvents = $true
			$process.StartInfo.UseShellExecute = $false
			$process.StartInfo.CreateNoWindow = $true
			$process.StartInfo.RedirectStandardInput = $true
			$PassThru = $true #Force the object to return
		}
		
		#Pass the arguments and sync with the form
		$process.StartInfo.Arguments = $Arguments
		$process.SynchronizingObject = $SyncObject
		$process.Start() | Out-Null
		
		#Begin the redirect reads
		if ($RedirectOutputScript)
		{
			$process.BeginOutputReadLine()
		}
		
		if ($RedirectErrorScript)
		{
			$process.BeginErrorReadLine()
		}
	}
	catch
	{
		Write-Error $_.Exception.Message
		$process = $null
	}
	
	if ($null -ne $process)
	{
		#Create a Custom Object to keep track of the Job & Script Blocks
		$members = @{
			"Process"	     = $process;
			"CompleteScript" = $CompletedScript;
			"UpdateScript"   = $UpdateScript
		}
		
		$psObject = New-Object System.Management.Automation.PSObject -Property $members
		
		[void]$ProcessTrackerList.Add($psObject)
		
		#Start the Timer
		if (-not $timerProcessTracker.Enabled)
		{
			$timerProcessTracker.Start()
		}
			
		#Return the process if using PassThru
		if ($PassThru)
		{
			return $process	
		}
	}
	elseif ($null -ne $CompletedScript)
	{
		#Failed
		Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
	}
	
}
#endregion
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>
